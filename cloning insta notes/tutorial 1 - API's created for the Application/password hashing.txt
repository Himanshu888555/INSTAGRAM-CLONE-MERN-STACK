password hashing : 


we will be using  NPM module : bcryptjs module .


for installing , go to cmd :  npm install bcryptjs 



after insatlling then we will use bcryptjs in our project .



open auth.js ->   in the initalization :   const bcrypt = require('bcryptjs')


Now we will be changing a little bit of code for hashing of password : 


in the code of auth.js :    before the new user instance  i.e  const user = new User ({name,email,password})

we will add :  
       
   // code :     bcrypt.hash(password,14 <as this will ensure the number of password more bigger the number , more secure the password>) . then(hasedpassword=>{<cut and paste all the code from const user = new User ({name,email,password}) to end because all the process will take inside this hasedpassword function >})
 



// actual code :   





router.post('/signup',(req,res)=>{
    const{name,email,password}=req.body
    if(!email || !password || !name){
        res.status(422).json({error:"please add all the fields"})
    }
    User.findOne({email:email})  // findOne is the mongo db operator for finding one element in the database so here email.  then it will check email already exists or not.
    .then((saveduser)=>{
        if(saveduser){
            return res.status(422).json({error:"User is already with that email"})    //error generated if email found already in database
        }
        bcrypt.hash(password,14)
        .then(hashedpassword=>{
            const user = new User({   //create new instanse of new user with email,name,password
                email,
                password:hashedpassword,
                name
     
            })
     
              user.save()      //save the user 
              .then(user=>{
                  res.json({message:"saved successfully"})       // success msg to the user
              })
              .catch(err=>{
                  console.log(err)
              })
        })
       

    })
    .catch(err=>{console.log(err)})   
    // res.json({message:"successfully posted"})
}) 



module.exports = router 








so with this we have successfully hashed our code.


run the server -> In postman enter the json formated {"name":"","email":"","password":""}  -> then click on "send" button for request

after that check monogo db atlas database :  thier all the password will be saved within the hashed code.


 












